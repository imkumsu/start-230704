Shared Preference
===================
click count되는 버튼 생성 + 최근 클릭 버튼 안내 + 최근 클릭 시간 안내
----------------------

```kotlin
package com.example.assignment
import android.app.Activity
import android.content.Context
import android.os.Bundle
import android.provider.Settings.Global.putInt
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.edit
import com.example.assignment.ui.theme.AssignmentTheme
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
@Composable
fun ClickCounterApp() {
    val activity = LocalContext.current as? Activity
    val sharedPref = remember {
        activity?.getPreferences(Context.MODE_PRIVATE)
    }

    var clickCount by remember {
        val countValue = sharedPref?.getInt("counter", 0) ?: 0
        mutableStateOf(countValue)
    }
    var ttime by remember {
        val currenttime = sharedPref?.getString("tt", "") ?: ""
        mutableStateOf(currenttime)
    }
    val time = System.currentTimeMillis()

    var currentTime by remember {
        mutableStateOf(showCurrentTime())
    }
    var lastClickedButtonLabel by remember { mutableStateOf("") }
    var lastClickedTime by remember { mutableStateOf("") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "$clickCount",
            fontSize = 60.sp
        )
        Row() {
            Button(
                onClick = {
                    clickCount++
                    sharedPref?.edit {
                        putInt("counter", clickCount)
                        apply()
                    }
                    currentTime = showCurrentTime()
                    lastClickedButtonLabel = "증가"
                    lastClickedTime = currentTime
                },
                colors = ButtonDefaults.buttonColors(Color(0xFFC9E7DB)),
                modifier = Modifier
                    .padding(16.dp)
                    .size(width = 100.dp, height = 100.dp)
            ) {
                Text(text =
                "증가",
                    fontSize = 25.sp)
            }

            Button(
                onClick = {
                    clickCount--
                    sharedPref?.edit {
                        putInt("counter", clickCount)
                        apply()
                    }
                    currentTime = showCurrentTime()
                    lastClickedButtonLabel = "감소"
                    lastClickedTime = currentTime
                },
                colors = ButtonDefaults.buttonColors(Color(0xFFFFB4BF)),
                modifier = Modifier
                    .padding(16.dp)
                    .size(width = 100.dp, height = 100.dp)

            ) {
            Text(text =
            "감소",
                fontSize = 25.sp)
        }
        }
        Row() {
            Button(
                onClick = {
                    clickCount *= 2
                    sharedPref?.edit {
                        putInt("counter", clickCount)
                        apply()
                    }
                    currentTime = showCurrentTime()
                    lastClickedButtonLabel = "X2"
                    lastClickedTime = currentTime
                },
                colors = ButtonDefaults.buttonColors(Color(0xFFEB8291)),
                modifier = Modifier
                    .padding(16.dp)
                    .size(width = 100.dp, height = 100.dp)

            ) {
            Text(text =
            "X2",
                fontSize = 25.sp)
        }
            Button(
                onClick = {
                    clickCount /= 2
                    sharedPref?.edit {
                        putInt("counter", clickCount)
                        apply()
                    }
                    currentTime = showCurrentTime()
                    lastClickedButtonLabel = "/2"
                    lastClickedTime = currentTime
                },
                colors = ButtonDefaults.buttonColors(Color(0xFFFFC97F)),
                modifier = Modifier
                    .padding(16.dp)
                    .size(width = 100.dp, height = 100.dp)

            ) {
            Text(text =
            "/2",
                fontSize = 25.sp)
        }
        }
        Button(
            onClick = {
                clickCount = 0
                sharedPref?.edit {
                    putInt("counter", clickCount)
                    apply()

                }
                lastClickedButtonLabel = "초기화"
                lastClickedTime = ttime

            },
            colors = ButtonDefaults.buttonColors(Color(0xFFD4E0EE)),
            modifier = Modifier
                .padding(16.dp)
                .size(width = 100.dp, height = 100.dp)
        ) {
            Text(text =
            "초기화",
                fontSize = 15.sp)
        }
        Button(
            onClick = {
                ttime = showCurrentTime()
                sharedPref?.edit {
                    putString("tt", ttime)
                    apply()
                }
                lastClickedButtonLabel = "마지막 클릭"
                lastClickedTime = ttime
            },
            colors = ButtonDefaults.buttonColors(Color.Black),
            modifier = Modifier
                .padding(16.dp)
        ) {
        Text(
            text = "$lastClickedButtonLabel\n$lastClickedTime",
            fontSize = 15.sp,
            textAlign = TextAlign.Center
        )
    }
    }
}
fun showCurrentTime() : String {
    val currentTime = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(
        Date()
    )
    return currentTime
}

//@Preview(showBackground = true)
//
//@Composable
//fun PreviewClickCounterApp() {
//    AssignmentTheme {
//
//        ClickCounterApp()
//    }
//}
//
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            AssignmentTheme {
                ClickCounterApp()
            }
        }
    }
}
```
